// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Widely-used gates
    Not(in=instruction[15], out=ainstruction);
    Not(in=ainstruction, out=cinstruction);

    // The sel bit here is determined by whether the instruction is an A-instruction or C-instruction
    // because for C-instructions we don't need to load them into the Mux since all the relevant
    // bits of the C-instruction get loaded into the various CPU chips as control bits. For an
    // A-instruction, however, we want to load the entire thing into the Mux since we need all
    // bits to figure out the value.
    Mux16(a=aluout, b=instruction, sel=ainstruction, out=mux1out);

    // Logic for A-register: A-instruction OR (C-instruction AND A register bit set)
    And(a=cinstruction, b=instruction[5], out=aregand);
    Or(a=aregand, b=ainstruction, out=aregload);
    ARegister(in=mux1out, load=aregload, out=aregout, out[0..14]=addressM);


    // The ALU's "a" bit is used here to distinguish A/M register
    And(a=cinstruction, b=instruction[12], out=mux2sel);
    Mux16(a=aregout, b=inM, sel=mux2sel, out=mux2out);

    // Logic for D-register: C-instruction AND D register bit set)
    And(a=cinstruction, b=instruction[4], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout);

    // ALU has a bunch of control bits from c-instruction
    ALU(x=dregout, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zrout, ng=ngout);

    // writeM is a combination of C-instruction and instruction[3] (which sets the M register)
    And(a=cinstruction, b=instruction[3], out=writeM);

    // PC: this logic is pretty complex (or at least involves many chips) - try to simplify it.
    // Jump logic:
    // ((zr AND instruction[1]) OR 
    //   (ng AND instruction[2]) OR 
    //   (!zr AND !ng AND instruction[0]))
    // AND C-instruction
    And(a=zrout, b=instruction[1], out=andzero);
    And(a=ngout, b=instruction[2], out=andneg);
    Not(in=zrout, out=notzrout);
    Not(in=ngout, out=notngout);
    And(a=notzrout, b=notngout, out=posout);
    And(a=posout, b=instruction[0], out=andpos);
    Or(a=andzero, b=andneg, out=or1);
    Or(a=or1, b=andpos, out=jumpset);
    And(a=jumpset, b=cinstruction, out=loadout);
    PC(in=aregout, load=loadout, inc=true, reset=reset, out[0..14]=pc);
}
