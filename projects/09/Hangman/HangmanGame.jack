class HangmanGame {
  field Hangman hangman; // The figure that tracks missed guesses
  field String remainingLetters; // Letters not yet guessed
  field String word; // Word the player must guess
  field int remainingLettersInWord; // How many letters does player still need to guess
  field boolean activeGame; // Game finishes when won or lost

  /** Constructs a new Hangman Game. */
  constructor HangmanGame new(int seedValue) {
    do Screen.clearScreen();
    let activeGame = true;
    do pickHiddenWord(seedValue);
    do initializeScreen();
    let hangman = Hangman.new();
    return this;
  }

  method void pickHiddenWord(int seedValue) {
    var Array words;
    var int numOfWords;
    let numOfWords = 27;
    let words = Array.new(numOfWords);
    let words[0] = "ACCOUNT"; let words[1] = "AGAINST"; let words[2] = "ANSWER";
    let words[3] = "BALANCE"; let words[4] = "BEAUTIFUL"; let words[5] = "BITTER";
    let words[6] = "CHEMICAL"; let words[7] = "DELICATE"; let words[8] = "FERTILE";
    let words[9] = "HOSPITAL"; let words[10] = "IMPULSE"; let words[11] = "JEWEL";
    let words[12] = "KETTLE"; let words[13] = "LOOSE"; let words[14] = "MANAGER";
    let words[15] = "MATERIAL"; let words[16] = "ORANGE"; let words[17] = "PAST";
    let words[18] = "PHYSICAL"; let words[19] = "QUALITY"; let words[20] = "REGRET";
    let words[21] = "RHYTHM"; let words[22] = "SCIENCE"; let words[23] = "SPONGE";
    let words[24] = "THEORY"; let words[25] = "VESSEL"; let words[26] = "WHILE";
    do Random.setSeed(seedValue);
    let word = words[Random.randRange(numOfWords)];
    let remainingLettersInWord = word.length();
    return;
  }

  /** Draw initial game elements on screen. */
  method void initializeScreen() {
    do drawGallows();
    do initializeLetters();
    do drawBlanksForWord();
    do printOutputForPlayer("Welcome to Hangman - guess any letter");
    return;
  }

  /** Runs the game: handles player's guessed letters and updates
  the hidden word. */
  method void run() {
    var char key; // The key currently pressed by the player

    while (activeGame) {
      // Waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
      }

      if ((key > 64) & (key < 91)) { // A-Z (ASCII values: 65-90)
        do printOutputForPlayer("You guessed a letter");
        do handleGuessedLetter(key);
      }

      if ((key > 96) & (key < 123)) { // a-z (ASCII values: 97-122)
        // TODO: Do we need this? Keyboard input seems to be all uppercase
      }

      // Waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }
    }
    return;
  }

  method void handleGuessedLetter(char letter) {
    if (isInRemainingLetters(letter)) { // Only handle unguessed letters
      do removeLetter(letter);

      if (isInWord(letter)) {
        do revealLetter(letter);
        if (remainingLettersInWord = 0) { // Player won
          do printOutputForPlayer("Congratulations! You won!");
          let activeGame = false;
        }
      }
      else {
        do hangman.addPart();
        if (hangman.allPartsDrawn()) { // Player lost
          do printOutputForPlayer("Game over - you lost");
          let activeGame = false;
        }
      }
    }
    return;
  }

  /** See if letter is in remaining letters */
  method boolean isInRemainingLetters(char letter) {
    var int i;
    let i = 0;

    while (i < remainingLetters.length()) {
      if (letter = remainingLetters.charAt(i)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Remove letter from remaining letters (since it's been guessed) */
  method void removeLetter(char letter) {
    var int i;
    let i = 0;

    while (i < remainingLetters.length()) {
      if (letter = remainingLetters.charAt(i)) {
        do remainingLetters.setCharAt(i, 126);
      }
      let i = i + 1;
    }
    do drawRemainingLetters(); // Update letters on screen
    return;
  }

  /** Check if hidden word contains letter */
  method boolean isInWord(char letter) {
    var int i;
    let i = 0;

    while (i < word.length()) {
      if (letter = word.charAt(i)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Show any blanks in hidden work that match letter */
  method void revealLetter(char letter) {
    var int i;
    let i = 0;

    while (i < word.length()) {
      if (letter = word.charAt(i)) {
        // Move cursor to correct spot to write over blank
        // corresponding to letter. The lines are drawn with a 
        // (x, y) pixel system and the letters are printed with a
        // (row, column) grid system so we need to bridge the 2 
        // systems.
        do Output.moveCursor(17, 28 + (i * 4));
        do Output.printChar(letter);
        let remainingLettersInWord = remainingLettersInWord - 1;
      }
      let i = i + 1;
    }
    return;
  }

  /** Disposes this game. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void drawGallows() {
    do Screen.drawRectangle(20, 239, 80, 241); // Base
    do Screen.drawRectangle(49, 70, 51, 240); 
    do Screen.drawRectangle(50, 69, 150, 71); 
    do Screen.drawRectangle(149, 70, 151, 100);
    // Draw support beam
    do Screen.drawLine(50, 99, 80, 69);
    do Screen.drawLine(50, 100, 80, 70);
    do Screen.drawLine(50, 101, 80, 71);

    return;
  }

  // Draw remainingLetters (will have 1 letter at a time disappear)
  method void drawRemainingLetters() {
    var int i;
    let i = 0;

    // Want to overwrite existing alphabet
    do Output.moveCursor(1, 6); // Screen has 23 cursor rows 
    while (i < remainingLetters.length()) {
      do Output.printChar(remainingLetters.charAt(i));
      do Output.printString(" ");
      let i = i + 1;
    }

    return;
  }

  method void initializeLetters() {
    let remainingLetters = String.new(26);
    let remainingLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    do drawRemainingLetters();
    return;
  }

  method void drawBlanksForWord() {
    var int wordX, wordY;
    var int i, offset, width;

    let wordX = 220;
    let wordY = 200;

    let i = 0;
    let offset = 0;
    let width = 16; // Multiple of 8 so it can line up with printed chars
    // (which are 8 pixels wide)

    while (i < word.length()) {
      do Screen.drawLine(wordX + offset, wordY, wordX + offset + width, wordY);
      let i = i + 1;
      let offset = offset + (width * 2); // Width plus spacing
    }

    return;
  }

  method void printOutputForPlayer(String output) {
    var int outputRow, outputCol; // Where output will show up
    let outputRow = 3; // Place output just below remainging letters
    let outputCol = 6;
    do Output.moveCursor(outputRow, outputCol);
    do Output.printString("                                     "); // Clear the previous output
    do Output.moveCursor(outputRow, outputCol);
    do Output.printString(output);
    return;
  }
}
