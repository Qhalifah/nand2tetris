class HangmanGame {
  field Hangman hangman; // The figure that tracks missed guesses
  field String remainingLetters; // Letters not yet guessed
  field String word; // Word the player must guess
  field char currentLetter; // Currently guessed letter

  /** Constructs a new Hangman Game. */
  constructor HangmanGame new() {
    do pickHiddenWord();
    do initializeScreen();
    let hangman = Hangman.new();
    return this;
  }

  method void pickHiddenWord() {
    // TODO: Pick word from list dynamically
    let word = String.new(9);
    let word = "FOOBARBAZ";
    return;
  }

  /** Draw initial game elements on screen. */
  method void initializeScreen() {
    do drawGallows();
    do initializeLetters();
    do drawBlanksForWord();
    return;
  }

  /** Runs the game: handles player's guessed letters and updates
  the hidden word. */
  method void run() {
    var char key; // The key currently pressed by the player
    var boolean exit;
    let exit = false;

    while (~exit) {
      // Waits for a key to be pressed
      while (key = 0) {
        let key = Keyboard.keyPressed();
      }

      // TODO: Make it work for capital letters
      if ((key > 64) & (key < 91)) { // A-Z (ASCII values: 65-90)
        let currentLetter = key; // TODO: Use or remove
        do handleGuessedLetter(key);
      }

      if ((key > 96) & (key < 123)) { // a-z (ASCII values: 97-122)
        // TODO: Do we need this? Keyboard input is uppercase only it seems
      }

      // Waits for the key to be released
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
      }
    }
    return;
  }

  method void handleGuessedLetter(char letter) {
    if (isInRemainingLetters(letter)) { // Only handle unguessed letters
      do removeLetter(letter);

      if (isInWord(letter)) {
        do revealLetter(letter);
      }
      else {
        do hangman.addPart();
      }
    }
    return;
  }

  /** See if letter is in remaining letters */
  method boolean isInRemainingLetters(char letter) {
    var int i;
    let i = 0;

    while (i < remainingLetters.length()) {
      if (letter = remainingLetters.charAt(i)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Remove letter from remaining letters (since it's been guessed) */
  method void removeLetter(char letter) {
    var int i;
    let i = 0;

    while (i < remainingLetters.length()) {
      if (letter = remainingLetters.charAt(i)) {
        // TODO: Replace guessed letters with special char?
        do remainingLetters.setCharAt(i, String.doubleQuote());
      }
      let i = i + 1;
    }
    do drawRemainingLetters(); // Update letters on screen
    return;
  }

  /** Check if hidden word contains letter */
  method boolean isInWord(char letter) {
    var int i;
    let i = 0;

    while (i < word.length()) {
      if (letter = word.charAt(i)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  /** Show any blanks in hidden work that match letter */
  method void revealLetter(char letter) {
    var int i;
    let i = 0;

    while (i < word.length()) {
      if (letter = word.charAt(i)) {
        // Move cursor to correct spot to write over line
        // corresponding to letter. The lines are drawn with an 
        // (x, y) pixel system and the letters are printed with an
        // (row, column) grid system so we need to bridge the 2 
        // systems.
        do Output.moveCursor(17, 28 + (i * 4));
        do Output.printChar(letter);
      }
      let i = i + 1;
    }
    return;
  }

  /** Disposes this game. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void drawGallows() {
    // TODO: Make these values dynamic - height, width, startingX, startingY
    do Screen.drawRectangle(20, 200, 80, 240);
    do Screen.drawLine(50, 200, 50, 100);
    do Screen.drawLine(50, 100, 150, 100);
    do Screen.drawLine(150, 100, 150, 130);

    return;
  }

  // Draw remainingLetters (will have 1 letter at a time disappear)
  method void drawRemainingLetters() {
    var int i;
    let i = 0;

    // Want to overwrite existing alphabet
    do Output.moveCursor(1, 6); // Screen has 23 cursor rows 
    while (i < remainingLetters.length()) {
      do Output.printChar(remainingLetters.charAt(i));
      do Output.printString(" ");
      let i = i + 1;
    }

    return;
  }

  method void initializeLetters() {
    let remainingLetters = String.new(26);
    let remainingLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    do drawRemainingLetters();
    return;
  }

  method void drawBlanksForWord() {
    var int wordX, wordY;
    var int i, offset, width;

    let wordX = 220;
    let wordY = 200;

    let i = 0;
    let offset = 0;
    let width = 16; // Multiple of 8 so it can line up with printed chars
    // (which are 8 pixels wide)

    while (i < word.length()) {
      do Screen.drawLine(wordX + offset, wordY, wordX + offset + width, wordY);
      let i = i + 1;
      let offset = offset + (width * 2); // Width plus spacing
    }

    return;
  }
}
