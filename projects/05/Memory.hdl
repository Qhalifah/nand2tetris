// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // For input, figure out loading logic based on address[14]
    // and address[13], which have a unique combo for IDing
    // RAM addresses vs Screen addresses (vs others).
    // Use a couple of Mux16 chips to figure out which area of 
    // memory should provide the output.

    // RAM16K input: load and Not addr[14], to only load 0-16383
    Not(in=address[14], out=notaddr14);
    And(a=load, b=notaddr14, out=ram16load);
    // Exclude first bit of address since ram16k takes 14 bits
    RAM16K(in=in, load=ram16load, address=address[0..13], out=ram16out);

    // Screen input: load and addr[14] and Not addr[13], to only load 16384-24575
    And(a=load, b=address[14], out=andloadaddr14);
    Not(in=address[13], out=notaddr13);
    And(a=andloadaddr14, b=notaddr13, out=screenload);
    // Exclude first 2 bits since screen takes 13 bits
    Screen(in=in, load=screenload, address=address[0..12], out=screenout);
    
    // Keyboard
    Keyboard(out=kbdout);

    // Output
    Mux16(a=screenout, b=kbdout, sel=address[13], out=muxout);
    Mux16(a=ram16out, b=muxout, sel=address[14], out=out);
}
